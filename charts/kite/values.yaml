# Default values for kite.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/zxh326/kite
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag:

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

debug: false

# External Host for the application
# Used in generate OAuth redirect URLs
# Leave empty to obtain from request headers
# Example: https://kite.zzde.me
host: ""

# Set to true to enable the anonymous user with full-admin access
# Be careful with this setting in production
anonymousUserEnabled: false

# This is the key used for signing JWT tokens
# Change this in production
# Ignored if using existingSecret
jwtSecret: "kite-default-jwt-secret-key-change-in-production"

# This is the key used for encrypting sensitive data
# Change this in production
# Ignored if using existingSecret
encryptKey: "kite-default-encryption-key-change-in-production"

# Superuser configuration
# Used to create an initial superuser account on first startup
# If superUser.create is false, will be setup in landing page
# First install will create the superuser automatically
# Subsequent installs/update will not modify the user
# Ignored if using existingSecret
superUser:
  create: false
  username: "admin"
  password: ""

# Secret handling
# By default the chart will create a Kubernetes Secret containing sensitive values.
secret:
  # Create the Secret from chart values (true) or reference an existing Secret (false)
  create: true
  # If set, the deployment will use this existing secret name instead of the generated one (ignored when `create: true`).
  # must contain all required keys.
  #  JWT_SECRET
  #  KITE_ENCRYPT_KEY
  #  DB_TYPE supported values: sqlite, postgres, mysql (defaults to sqlite if not set)
  #  DB_DSN (not required for sqlite)
  # 
  #  see superUser section for more details
  #  KITE_USERNAME (optional for superuser)
  #  KITE_PASSWORD (optional for superuser)
  # if set, the db.dsn and db.type values from the chart will be ignored.
  existingSecret: ""

# Database configuration
# type: sqlite | postgres | mysql
# - sqlite: embedded DB (default). If you choose sqlite and want data to survive pod restarts,
#   enable persistence below so a PVC will be used to store the sqlite file.
# - postgres/mysql: connection fields for external DBs.
db:
  # supported values: sqlite, postgres, mysql
  type: sqlite
  # full DSN string for MySQL/Postgres.
  # when type is mysql/postgres, is required
  # leave empty for use existingSecret to provide it when type is not sqlite
  # Example: "mysql://user:password@tcp(host:port)/dbname"
  dsn: ""
  
  # sqlite-specific options
  sqlite:
    # If true, the chart will create a PVC and mount it into the pod for the sqlite DB file.
    # Set to false to use ephemeral storage (not recommended for production).
    persistence:
      pvc:
        enabled: false
        existingClaim: ""
        # StorageClass to request for the PVC (optional)
        storageClass: ""
        # accessModes for the PVC
        accessModes:
          - ReadWriteOnce
        # requested size
        size: 1Gi
      hostPath:
        enabled: false
        path: /path/to/host/dir
        type: DirectoryOrCreate
      # where to mount inside the container
      mountPath: /data
      # sqlite filename inside the mountPath
      filename: kite.db
    # Additional sqlite database connection options
    # Example: "_journal_mode=WAL&_busy_timeout=5000"
    options: ""
extraEnvs:
  # - name: "EXAMPLE_ENV"
  #   value: "example_value"

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  create: true
  rules:
    - apiGroups: ["*"]
      resources: ["*"]
      verbs: ["*"]
    - nonResourceURLs: ["*"]
      verbs: ["*"]

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: "nginx"
  annotations: {}
  hosts:
    - host: kite.zzde.me
      paths:
        - path: /
          pathType: ImplementationSpecific
  # tls:
  #  - hosts:
  #      - kite.zzde.me

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
readinessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
