# Default values for kite.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/zxh326/kite
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag:

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# Multi-cluster configuration using kubeconfig
multiCluster:
  # Enable multi-cluster mode by mounting kubeconfig
  enabled: false
  
  # Kubeconfig configuration options
  kubeconfig:
    # Create a secret from kubeconfig content
    # If enabled, you need to provide the kubeconfig content
    fromContent: false
    
    # The kubeconfig file content (plain text)
    # Only used when fromContent is true
    # use can specify the kubeconfig content with helm set-file flag:
    #   helm install kite . --set-file multiCluster.kubeconfig.content=/path/to/kubeconfig
    content: ""
        
    # Use existing secret containing kubeconfig
    # If specified, fromContent will be ignored
    existingSecret: ""

    # Key name in the secret that contains kubeconfig
    # Only used when existingSecret is specified
    secretKey: "kubeconfig"

  # Prometheus configuration for each cluster
  # Key should be the cluster/context name, value should be the prometheus URL
  prometheus:
    # Example cluster configurations:
    # production: "https://prometheus.production.example.com"
    # staging: "https://prometheus.staging.example.com"
    # cluster-1: "http://prometheus.cluster-1.svc.cluster.local:9090"
  # Default Prometheus URL for clusters that don't have specific configuration
  defaultPrometheusUrl: ""

# update 
jwtSecret: "your_jwt_secret_key_here"

basicAuth:
  enabled: true
  username: "kite"
  password: "password"

oauth:
  enabled: false
  allowUsers: "*"
  # This is the redirect URL for OAuth callbacks.
  # change this to your application's URL.
  redirect: "http://localhost:8080/api/auth/callback"
  providers:
    # <any_provider>:
    #   clientId: ""
    #   clientSecret: ""
    #   authUrl:
    #   tokenUrl:
    #   userInfoUrl: "*"
    #   scopes: ""

extraEnvs:
  # - name: "EXAMPLE_ENV"
  #   value: "example_value"

webhook:
  enabled: false
  username: "kite"
  password: "password"

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  create: true
  rules:
    - apiGroups: ["*"]
      resources: ["*"]
      verbs: ["*"]
    - nonResourceURLs: ["*"]
      verbs: ["*"]

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: "nginx"
  annotations: {}
  hosts:
    - host: kite.zzde.me
      paths:
        - path: /
          pathType: ImplementationSpecific
  # tls:
  #  - hosts:
  #      - kite.zzde.me

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
readinessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
